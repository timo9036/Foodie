package com.example.foodie.di

import com.example.foodie.util.Constants.Companion.BASE_URL
import com.example.foodie.data.network.FoodRecipesApi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {

    //configures and returns an instance of OkHttpClient with a read timeout and connect timeout of 15 seconds
    @Singleton
    @Provides
    fun provideHttpClient() : OkHttpClient {
        return OkHttpClient.Builder()
            .readTimeout(15, TimeUnit.SECONDS)
            .connectTimeout(15, TimeUnit.SECONDS)
            .build()
    }

    //returns an instance of GsonConverterFactory that is used to convert JSON responses from the network into Kotlin objects
    @Singleton
    @Provides
    fun provideConverterFactory(): GsonConverterFactory{
        return GsonConverterFactory.create()
    }

    //takes OkHttpClient and GsonConverterFactory as parameters, which are injected by Dagger Hilt.
    // It configures and builds a Retrofit instance with a specified base URL, okHttpClient, and gsonConverterFactory.
    @Singleton
    @Provides
    fun provideRetrofitInstance(
        okHttpClient: OkHttpClient,
        gsonConverterFactory: GsonConverterFactory
    ): Retrofit{
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(gsonConverterFactory)
            .build()
    }

    //interface generated by Retrofit to define API endpoints and their corresponding functions.
    //It takes a Retrofit instance as a parameter and uses it to create an implementation of the FoodRecipesApi interface
    @Singleton
    @Provides
    fun provideApiService(retrofit: Retrofit): FoodRecipesApi {
        return retrofit.create(FoodRecipesApi::class.java)
    }
}